#!/usr/bin/env python

import time
import argparse
import os
from subprocess import Popen, PIPE
from scipy import stats
from multiprocessing import Process
import os.path as path

'''
Variables of importance
'''
VERSION=1.0


'''
	Go through the SAM once, write out the strain unique and species unique, also keep track of the number of reads per strain
'''
def count_and_split(fo_base, sam_in, output_reads=False):
	with open(fo_base+".strain.tab", "w") as fo_strain, open(fo_base+".species.tab", "w") as fo_species:
		lastread = -1
		lastspecies = ""
		laststrain = ""
		printSpecies = False
		printStrain = False
		lines = "" #Buffer of lines of the last read
	
		strain_reads = ""
		species_reads = ""
	
		for line in sam_in:
			#print(line)
			#print(line[0],"\n")
			if line[0] == "@": #Marks SAM header lines
				fo_strain.write(line)
				fo_species.write(line)
			else:
				name=line.split("\t")[1]
				strain=name.split('.')
				del strain[-1]
				strain = '.'.join(strain) #Remove the final '.1', etc
				genus=name.split('_')[0]
				tspecies=name.split('_')[1]
				tspecies=' '.join([genus,tspecies])
				read = line.split()[0]
				if read != lastread:
					if printStrain:
						strain_reads = strain_reads + lines
					if printSpecies:
						species_reads = species_reads + lines
					printStrain = True
					printSpecies = True
					if output_reads:
						lines = "\t".join([read,name,line.split()[2],line.split()[3]])+"\n" #Start the current buffer over
					else:
						lines = "\t".join([read,name,line.split()[2]])+"\n" #Start the current buffer over
					lastread = read
					lastspecies = tspecies
					laststrain = strain
				else:
					if lastspecies != tspecies:
						printSpecies = False
					if laststrain != strain:
						printStrain = False
					if output_reads:
						lines = "\t".join([read,name,line.split()[2],line.split()[3]])+"\n" #Start the current buffer over
					else:
						lines = "\t".join([read,name,line.split()[2]])+"\n" #Start the current buffer over
		fo_strain.write(strain_reads)
		fo_species.write(species_reads)
	sam_in.close()
	
	
'''
	Pass in the tabfile, the outfile, and the level (mode) to run in
	"level" MUST be either 'strain' or 'species', for the final analysis
	Count up the genomic range that these reads cover, for each genome	
'''
def summarize_coverage(tab_in, coverage_out, level):
	
	try:
		fi = open(tab_in, 'r') #Tabfile in
	except IOError:
		print("Error opening "+tab_in)
		exit()
	try:
		fo = open(coverage_out, 'w') #.coverage out
	except IOError:
		print("Error opening "+coverage_out)
		exit()
	chrs = [] #Name of each chromosome
	genomes = [] #Name of each genome of interest, which depends on the strain/species level of analysis
	chr_lengths = [] #Length of each chromosome
	starts = [] #Start positions of each read along the chromosome
	nreads = 0 #This is for averaging the read length
	windowSize = 100 #This is the size of the window for finding unique reads
	for line in iter(fi):
		line = line.split()
		if line[0] == '@':
			name = line[1]
			tlen = int(line[2])
			chrs = chrs+[name]
			chr_lengths = chr_lengths+[tlen]
			starts = starts + [set()]
			#Keep a record of which higher grouping this chromosome falls into
			if level == 'species':
				genome = '_'.join(name.split('.')[0].split('_')[0:2])
				genomes = genomes + [genome]
			if level == 'strain':
				genome=name.split('.')
				del genome[-1]
				genome = ".".join(genome) #Remove the final '.1', etc
				genomes = genomes + [genome]
		else:
			name = line[1] #Reference name
			pos = int(line[2])
			q = chrs.index(name)
			starts[q].add(int(round(pos/windowSize)))
			nreads = nreads+1
	unique_genomes = [] #This takes the mapping of chromosomes to organisms, and makes a unique list
	genome_lengths = []
	genome_coverages = [] #Aggregate length of all of the positions that are covered by bases for each organism
	for chr in chrs:
		chr_len = chr_lengths[chrs.index(chr)]
		genome = genomes[chrs.index(chr)] #Match the chromosome to the organism
		if genome not in unique_genomes:
			unique_genomes = unique_genomes + [genome]
			genome_lengths = genome_lengths + [0] #Aggregate length of all of the chromosomes for each organism (mapped to unique_genomes)
			genome_coverages = genome_coverages + [0]
		genome_index = unique_genomes.index(genome)
		genome_lengths[genome_index] = genome_lengths[genome_index] + chr_len
		chr_covered = starts[chrs.index(chr)]
		genome_coverages[genome_index] = genome_coverages[genome_index] + (len(chr_covered)*windowSize)
	for genome in unique_genomes:
		genome_index = unique_genomes.index(genome)
		fo.write('\t'.join([genome, str(genome_coverages[genome_index]/float(genome_lengths[genome_index]))]))
		fo.write('\n')
	fi.close()
	fo.close()

#not used
def get_column(fp, query_col, query, return_col):
	fi = open(fp, 'r')
	for line in iter(fi):
		line = line.strip()
		line = line.split()
		if line[query_col] == query:
			fi.close()
			return line[return_col]
	fi.close()
	return 'None'

def file_to_list(fp, col):
	out = list()
	fi = open(fp, 'r')
	for line in iter(fi):
		if col < 0:
			out.extend([line.strip()])
		else:
			line = line.strip()
			out.extend([line.split("\t")[col]])
	fi.close()
	return(out)

def ttest(l, n):
	x, y = stats.ttest_1samp(l, n)
	return(float(y))

#not used
def ttest_permutations(l):
	#For each of the values, test whether it is significantly different from the rest, 
	#using the Bonferroni correction for multiple hypothesis testing
	p = [ ttest([ float(l[x]) for x in range(0,len(l)) if x != i ], float(l[i])) for i in range(0,len(l)) ]
	p = [ p[i]*len(p) for i in range(0,len(p))] #Multiple testing correction
	return p

def executive_summary(out_base, null_file, siann_folder, fp_in):
	#Find the version of SIANN being run (the name of the folder 'scripts' is in)
	version=siann_folder.split('/')
	version=version[len(version)-1]
	#Timestamp
	now=time.strftime("%c")
	#Output table
	with open(out_base+'.summary.tsv', 'w') as fo:
#	fo = open(out_base+'.summary.tsv', 'w')
	
		#Make a summary of all of the coverage data that was computed earlier
		strain_name = file_to_list(null_file, 0)
		strain_null = file_to_list(null_file, 1)
		species_from_strain = file_to_list(null_file, 2)
		species_null = file_to_list(null_file, 3)
		strain_hits = file_to_list(out_base+'.strain.unique.coverage', 1)
	
		#Reformat as a dictionary
		strain={}
		for q in range(0, len(strain_name)):
			if strain_null[q] > 0:
				strain[strain_name[q]] = {'null':float(strain_null[q]),
											'species':species_from_strain[q],
											'species_null':float(species_null[q]),
											'val':float(strain_hits[q])}
		#Add the ratio of the value found to the (strain) null value
		for x in strain.keys():
			if strain[x]['val'] == 0:
				strain[x]['ratio']=0
			else:
				strain[x]['ratio']=strain[x]['val']/strain[x]['null']
			#The confidence value for each result is determined by empirical testing
			strain[x]['p'] = confidence(strain[x]['ratio'])
			#Write the strain information to the summary table
			fo.write('\t'.join([x, str(strain[x]['val']), str(strain[x]['null']), str(strain[x]['ratio']), str(strain[x]['p']) ]))
			fo.write('\n')
	
		#Generate score for species
		species_names = file_to_list(out_base+'.species.unique.coverage', 0)
		species_scores = file_to_list(out_base+'.species.unique.coverage', 1)
	
		#Convert to dictionary
		species = {}
		for q in range(0, len(species_names)):
			#print(species_names[q])
			species[species_names[q]] = {'val':float(species_scores[q])} 
	
		#Calculate the null for each species
		for x in species.keys():
			#print(x)
			#Get all the species-nulls for each strain belonging to this species
			nulls = [strain[y]['species_null'] for y in strain.keys() if strain[y]['species'] == x]
			species[x]['null'] = sum(nulls)/len(nulls)
			if species[x]['val'] > 0:
				species[x]['ratio'] = species[x]['val']/species[x]['null']
			else:
				species[x]['ratio'] = 0
			species[x]['p'] = confidence(species[x]['ratio'])
			#Write out to the summary table
			fo.write('\t'.join([x, str(species[x]['val']), str(species[x]['null']), str(species[x]['ratio']), str(species[x]['p'])]))
			fo.write('\n')
	
	#Text summary (also will be converted to HTML using Markdown)
	with open(out_base+'.summary.txt', 'w') as fo:
		#Write header
		fo.write("### Strain identification by alignment of near neighbors\n#### Version: "+version+"\n##### "+now+"\n\n***\n\n#### Input file: "+' & '.join(fp_in)+"\n\n#### Sample name:\t"+out_base+"\n\n")
		footer="***\n\n@Type\tOrganism\tConfidence (%)\tRaw value\n\n"
	
		#Take a cuttoff of p>=0.75 for the lower bound of reporting for species
		for x in species.keys():
			if species[x]['p'] < 0.75:
				del(species[x])
	
		#Print out the results, in numerical order
		if len(species) == 0:
			fo.write("None of the organisms included in the reference database were identified\n\n***\n\n")
		while len(species) > 0:
			top_val = max([species[x]['ratio'] for x in species.keys()])
			top = [x for x in species.keys() if species[x]['ratio'] == top_val][0]
			p = species[top]['p']
			ratio = species[top]['ratio']
			conf = 'low'
			if p >= float(0.9):
				conf = 'medium'
			if p >= float(0.95):
				conf = 'high'
			conf = conf + ' (' + str(p*100) + '%)'
			top=top.replace('_', ' ')
			fo.write(top + " was identified in this sample with " + conf + " confidence.\n\n")
			footer=footer+"@Species	"+top+"	"+conf+"	"+str(ratio)+"\t"+"\n\n"			
			del(species[top.replace(' ', '_')])
	
			#Find top strain(s), if any
			st = {}
			for x in strain.keys():
				if strain[x]['species'] == top.replace(' ', '_'):
					st[x]=strain[x]
			if len(st) == 0:
				fo.write("None of the specific strains included in the reference database were identified as the nearest neighbor with confidence greater than 75%\n\n***\n\n")
			else:
				while len(st) > 0:
					top_val = max([st[x]['ratio'] for x in st.keys()])
					top = [x for x in st.keys() if st[x]['ratio'] == top_val][0]
					p = st[top]['p']
					if p >= 0.75:
						ratio = st[top]['ratio']
						conf = 'low'
						if p >= float(0.9):
							conf = 'medium'
						if p >= float(0.95):
							conf = 'high'
						conf = conf + ' (' + str(p*100) + '%)'
						del st[top]
						top=top.replace('_', ' ')
						fo.write(top + " was identified in this sample with " + conf + " confidence.\n\n")
						footer=footer+"@Strain	"+top+"	"+conf+"	"+str(ratio)+"\n\n"
					else:
						del st[top]
		fo.write(footer)
	markdown(out_base+'.summary.txt',out_base+'.summary.html', siann_folder) 

def markdown(fp_in, fp_out, siann_folder):
	#Make HTML if Markdown.pl is in the 'bin' folder
	markdown_pl = siann_folder+'/bin/Markdown.pl'
	if os.path.isfile(markdown_pl):
		f=open(fp_out, 'w')
		Popen(['perl', markdown_pl, '--html4tags', fp_in], stdout=f).communicate()
		f.close()
		print("Wrote HTML output to "+fp_out)
		#Popen(['firefox', fp_out, '2>/dev/null']).communicate()
		

def run_siann(fasta, out, db, threads, report, output_reads, keep_sam):
	#Keep track of a set of files to be deleted
	to_delete=[]
	siann_folder = os.path.dirname(os.path.abspath(__file__)) #The scripts directory, which is in the same folder as the folder containing the raw genomes and the default database
	#siann_folder = siann_folder.split('/')
	#siann_folder = siann_folder[0:(len(siann_folder)-2)]
	#siann_folder = '/'.join(siann_folder)
	print("Input: " + " & ".join([x.replace('_', ' ') for x in fasta]))
	print("Output: " + out)
	if len(fasta) == 1: #Only one set of reads specified
		if len(fasta[0].split())>1:
			print("Please do not specify an input path with whitespaces")
			exit()
	else: #Two reads files specified
		if len(fasta[0].split())>1 or len(fasta[1].split())>1:
			print("Please do not specify an input path with whitespaces")
			exit()
	if len(out.split())>1:
		print("Please do not specify an output path with whitespaces")
		exit()
	if threads == 0:
		try:
			cpuinfo = Popen(['cat', '/proc/cpuinfo'], stdout=PIPE)
			awk_process = Popen(["awk", "/^processor/{print $3}"], stdin=cpuinfo.stdout, stdout=PIPE)
			wc_process = Popen(['wc', '-l'], stdin=awk_process.stdout, stdout=PIPE)
		except Exception:
			print("Popen error when evaluating thread parameters")
		threads=str(wc_process.communicate()[0]).strip()
	print("Threads: " + threads)

	#Find number of alignments to make per read
	database=siann_folder + "/"+db
	sps = []
	sps_count = []
	try:
		fi=open(database+ "/all.txt")
		for name in iter(fi):
			sp = '_'.join(name.split('.')[0].split('_')[0:2])
			if sp not in sps:
				sps = sps + [sp]
				sps_count = sps_count + [1]
			else:
				sps_count[sps.index(sp)] = sps_count[sps.index(sp)] + 1
	except IOError:
		print("Error opening/handling " + database+ "/all.txt" )
	nAlignments = str(max(sps_count)*2)
	print("Alignments: " + nAlignments)

	#Check for a FASTA or FASTQ file
	read_type = 'X'
	suffix=fasta[0].split('.').pop()
	if suffix == 'gz':
		suffix=fasta[0].split('.')[len(fasta[0].split('.'))-2]
	if suffix == "fa" or suffix == "fasta": 
		read_type='-f'
	if suffix == "fq" or suffix == "fastq": 
		read_type='-q'
	if read_type == 'X':
		print("Read file does not end in fasta, fa, fastq, or fq, with or without gz. Exiting.")
		exit()

	#Check how many read files were specified, 1 or 2
	if len(fasta) == 1:
		#assume commands are in $PATH
		cmd = ['bowtie2', '-k', nAlignments, '-p', threads, '--very-fast', '--score-min', 'L,-0.1,-0.1', read_type, '-x', database+'/db', '-U', fasta[0]]#, '2>/dev/null']
	else:
		cmd = ['bowtie2', '-k', nAlignments, '-p', threads, '--very-fast', '--score-min', 'L,-0.1,-0.1', read_type, '-x', database+'/db', '-1', fasta[0], '-2', fasta[1]] #, '2>/dev/null']
	#print(" ".join(cmd))
	FNULL = open(os.devnull, 'w')
	try:
		bowtie = Popen(cmd, stdout=PIPE, stderr=FNULL)
	except OSError:
		print(' '.join(cmd))
		print("Failed command above")
		return()
	if keep_sam: #Only if keeping the raw SAM output is specified
		tee = Popen(['tee', out+'.sam'], stdin=bowtie.stdout, stdout=PIPE)
	try:
		awk_script = open(out+'.awk', 'w')
		awk_script.write('{if(substr($1,1,1)=="@"){if($1=="@SQ"){print "@\t" substr($2,4) "\t" substr($3,4)}}else{if($3!="*")print $1 "\t" $3 "\t" $4 "\t" $10}}')
		awk_script.close()
	except (IOError):
		print("Error handling file operation " + out + '.awk')
	to_delete.append(out+'.awk')
	if keep_sam:
		awk = Popen(['awk', '-f', out+'.awk'], stdin=tee.stdout, stdout=PIPE)
	else:
		awk = Popen(['awk', '-f', out+'.awk'], stdin=bowtie.stdout, stdout=PIPE)
	sam_in = awk.stdout #End of pipe with SAM data
	count_and_split(out, sam_in, output_reads)
	sam_in.close()
	
	strain=Process(target=summarize_coverage, args=(out+".strain.tab", out+".strain.unique.coverage", "strain",))
	species=Process(target=summarize_coverage, args=(out+".species.tab", out+".species.unique.coverage", "species",))
	strain.start()
	species.start()
	strain.join()
	species.join()
	to_delete.append(out+".strain.tab")
	to_delete.append(out+".species.tab")
	
	if report:
		executive_summary(out, database + '/all.null', siann_folder, fasta)
	if output_reads:
		tab_to_fasta(out+".strain.tab", out+".strain.fasta")
		tab_to_fasta(out+".species.tab", out+".species.fasta")
	for x in to_delete:
		os.remove(x)
	FNULL.close()


def tab_to_fasta(tab_in, fasta_out):
	fin=open(tab_in, 'r')
	fout=open(fasta_out, 'w')
	for line in fin.readlines():
		if line[0] != '@': #Skip header
			line=line.split()
			fout.write(">"+line[0]+" "+line[1]+" "+line[2]+"\n"+line[3]+"\n")
	fin.close()
	fout.close()

#not used?
def median(mylist):
	sorts = sorted(mylist)
	length = len(sorts)
	if not length % 2:
		return (sorts[length / 2] + sorts[length / 2 - 1]) / 2.0
	return sorts[length / 2]


def confidence(raw):
	x={1.36878316981:0.97826086956521739130,1.27741821562:0.97872340425531914893,1.24905377817:0.97916666666666666666,1.23717944956:0.97959183673469387754,1.22043422762:0.97999999999999999998,1.21727701671:0.98039215686274509801,1.21331615211:0.98076923076923076920,1.19628018859:0.98113207547169811317,1.18567620571:0.98148148148148148144,1.14852394592:0.98181818181818181814,1.14710082879:0.98214285714285714281,1.14667847144:0.98245614035087719293,1.14383927993:0.98275862068965517236,1.14277458311:0.98305084745762711859,1.08435871541:0.98333333333333333328,1.05106421334:0.98360655737704918027,1.03469410317:0.98387096774193548381,1.03408643662:0.98412698412698412692,1.02788823773:0.98437499999999999993,1.02355092426:0.98484848484848484841,1.02347304624:0.98507462686567164171,1.01873628746:0.98529411764705882344,1.01724030679:0.98550724637681159411,1.01713268888:0.98571428571428571419,1.0159130193:0.98591549295774647877,1.00525048883:0.98611111111111111100,1.00478784518:0.98648648648648648637,1.00472209542:0.98701298701298701287,1.00361255472:0.98717948717948717937,1.00355446857:0.98734177215189873406,1.00297360703:0.98749999999999999988,1.00261722901:0.98780487804878048767,1.00257324556:0.98795180722891566251,1.00254392327:0.98809523809523809509,1.00212407007:0.98837209302325581380,1.00209989221:0.98850574712643678145,1.00202735862:0.98863636363636363620,1.00159215708:0.98876404494382022455,1.00089276836:0.98888888888888888872,1.00082946879:0.98901098901098901082,1.00076616922:0.98913043478260869548,0.999938748009:0.98947368421052631561,0.999918705796:0.98989898989898989880,0.999500177865:0.98999999999999999981,0.998968806393:0.99056603773584905640,0.998803882618:0.99065420560747663531,0.998487384778:0.99074074074074074053,0.998407448242:0.99082568807339449520,0.997801454422:0.99145299145299145275,0.996655260721:0.99152542372881355908,0.996242727017:0.99159663865546218463,0.995820014753:0.99180327868852458991,0.995405819296:0.99199999999999999973,0.994534539916:0.99248120300751879670,0.993783581043:0.99253731343283582060,0.993740966105:0.99259259259259259229,0.993707468466:0.99264705882352941146,0.993009396368:0.99270072992700729896,0.992278566347:0.99275362318840579679,0.991665612136:0.99280575539568345292,0.99013322661:0.99285714285714285682,0.988782717075:0.99310344827586206863,0.988482965273:0.99315068493150684898,0.988100071056:0.99319727891156462551,0.987492808472:0.99324324324324324290,0.986922699988:0.99328859060402684529,0.986172599403:0.99333333333333333298,0.986152760428:0.99337748344370860892,0.985834609495:0.99342105263157894701,0.985574769286:0.99358974358974358937,0.985079178346:0.99363057324840764294,0.983659865052:0.99371069182389937069,0.98309445057:0.99374999999999999962,0.982902668898:0.99378881987577639713,0.980473618612:0.99382716049382716011,0.977057741444:0.99386503067484662538,0.976056585925:0.99390243902439024351,0.975940979118:0.99393939393939393900,0.971585068401:0.99397590361445783093,0.970306515413:0.99401197604790419122,0.968039336202:0.99411764705882352901,0.964029088937:0.99415204678362573059,0.961041476767:0.99418604651162790657,0.957724795537:0.99421965317919075104,0.957120980092:0.99425287356321839040,0.949055115341:0.99428571428571428531,0.948288635353:0.99431818181818181777,0.94250592157:0.99435028248587570580,0.942138791699:0.99438202247191011194,0.941801324309:0.99441340782122904986,0.940837562979:0.99444444444444444402,0.922856374877:0.99456521739130434739,0.922032723395:0.99459459459459459416,0.920205432787:0.99462365591397849419,0.919151527775:0.99465240641711229903,0.917568878138:0.99468085106382978680,0.916229359637:0.99470899470899470856,0.914184674743:0.99473684210526315746,0.907699863929:0.99476439790575916187,0.905691732447:0.99479166666666666623,0.904936833617:0.99484536082474226760,0.896330120074:0.99489795918367346894,0.895954928319:0.99492385786802030412,0.887017292357:0.99497487437185929602,0.881967241697:0.99499999999999999953,0.88186822494:0.99502487562189054679,0.880753428902:0.99504950495049504903,0.877053029752:0.99507389162561576307,0.867967207241:0.99509803921568627403,0.864146240133:0.99512195121951219464,0.861718559467:0.99516908212560386424,0.850734725445:0.99521531100478468849,0.84696564798:0.99523809523809523759,0.84323987872:0.99526066350710900423,0.829348454833:0.99528301886792452779,0.81914585904:0.99530516431924882578,0.818656986892:0.99532710280373831724,0.818459062944:0.99534883720930232506,0.816624307959:0.99537037037037036985,0.813838165571:0.99539170506912442344,0.812421423262:0.99541284403669724718,0.801012604742:0.99543378995433789901,0.799122034344:0.99545454545454545401,0.796724018498:0.99547511312217194516,0.795232472104:0.99549549549549549495,0.783924689644:0.99551569506726457344,0.782145956441:0.99553571428571428516,0.778970774108:0.99555555555555555500,0.777373008427:0.99557522123893805254,0.777359997465:0.99559471365638766464,0.774634556093:0.99561403508771929768,0.760839041216:0.99563318777292576362,0.758041384962:0.99565217391304347769,0.751906820536:0.99567099567099567042,0.746467542905:0.99568965517241379253,0.743686704023:0.99570815450643776766,0.741369751967:0.99572649572649572591,0.737025343654:0.99574468085106382920,0.726847354958:0.99576271186440677907,0.725836126359:0.99578059071729957747,0.70782187976:0.99581589958158995757,0.705611704115:0.99583333333333333274,0.703615672102:0.99585062240663900355,0.702058865654:0.99586776859504132171,0.700083568316:0.99588477366255143972,0.694274434866:0.99590163934426229447,0.692061226985:0.99591836734693877490,0.68587179411:0.99593495934959349532,0.682321905308:0.99595141700404858238,0.679986366846:0.99596774193548387035,0.679910712648:0.99598393574297188693,0.675315793605:0.99599999999999999938,0.663676706217:0.99601593625498007906,0.657385924207:0.99604743083003952506,0.65724657159:0.99606299212598425133,0.656518790938:0.99607843137254901897,0.655090105071:0.99609374999999999936,0.63242990904:0.99610894941634241181,0.626997787067:0.99612403100775193734,0.623788868166:0.99613899613899613835,0.623148251362:0.99615384615384615320,0.61430188622:0.99616858237547892655,0.598255089323:0.99618320610687022835,0.592106648191:0.99619771863117870656,0.58994599086:0.99621212121212121145,0.582123786228:0.99622641509433962197,0.577392784251:0.99624060150375939782,0.57403450878:0.99625468164794007423,0.565486221785:0.99626865671641790977,0.565160850444:0.99628252788104089151,0.563069167941:0.99629629629629629561,0.556869889366:0.99261992619926199193,0.556459347127:0.99264705882352941107,0.547815094419:0.98901098901098901029,0.546674016906:0.98905109489051094820,0.543757399242:0.98909090909090909020,0.543505727082:0.98913043478260869494,0.539878454982:0.98916967509025270687,0.537586237792:0.98924731182795698853,0.536531687929:0.98928571428571428499,0.511733324566:0.98932384341637010603,0.504814054368:0.98936170212765957373,0.504407263678:0.98586572438162544096,0.499537362936:0.98591549295774647813,0.498039802145:0.98596491228070175364,0.495894642712:0.98606271777003484246,0.490444782682:0.98615916955017300963,0.482433000534:0.98620689655172413718,0.481458717476:0.98625429553264604736,0.478730525362:0.98630136986301369788,0.47715867861:0.98634812286689419720,0.471178060413:0.98639455782312925095,0.468895674225:0.98644067796610169416,0.464500316628:0.98648648648648648573,0.462027723499:0.98653198653198653123,0.456948302123:0.98662207357859531697,0.456067031792:0.98666666666666666591,0.449057301634:0.98671096345514950090,0.438988700106:0.98679867986798679791,0.436321361299:0.98684210526315789396,0.425367362722:0.98692810457516339791,0.411080098869:0.98697068403908794710,0.404663390084:0.98701298701298701220,0.397429392863:0.98709677419354838630,0.390278924829:0.98713826366559485451,0.386038478267:0.98717948717948717869,0.38221852929:0.98722044728434504712,0.361894514985:0.98726114649681528582,0.360621095186:0.98730158730158730078,0.359335363107:0.98734177215189873337,0.358605440501:0.98738170347003154493,0.353505786276:0.98742138364779874132,0.352059921782:0.98746081504702194275,0.347713449719:0.98749999999999999917,0.344234079174:0.98753894080996884652,0.341435655638:0.98761609907120742951,0.340621440515:0.98765432098765432015,0.339624996497:0.98461538461538461454,0.332645535072:0.98466257668711656357,0.332120009006:0.98165137614678898998,0.323537693128:0.98170731707317073086,0.322818811103:0.97872340425531914809,0.321636307127:0.97878787878787878703,0.319349143734:0.97885196374622356410,0.318791017272:0.97891566265060240878,0.316979051819:0.97897897897897897812,0.31638756181:0.97904191616766466980,0.312658939053:0.97910447761194029765,0.308917974148:0.97922848664688427214,0.299966972718:0.97928994082840236600,0.297583417569:0.97935103244837758025,0.296707503828:0.97941176470588235207,0.294856009545:0.97947214076246334223,0.291094485116:0.97953216374269005760,0.282804629021:0.97959183673469387667,0.279046169457:0.97971014492753623100,0.278702574445:0.97687861271676300489,0.277565084227:0.97694524495677233340,0.276400292659:0.97707736389684813664,0.270590224928:0.97720797720797720708,0.270440883833:0.97727272727272727183,0.267993874426:0.97746478873239436530,0.26589115081:0.97752808988764044854,0.264854714008:0.97759103641456582543,0.264176333776:0.97486033519553072535,0.262134280399:0.97499999999999999908,0.261216963737:0.97506925207756232595,0.260255965925:0.97513812154696132504,0.258422664625:0.97520661157024793296,0.255043391066:0.97252747252747252655,0.253839757039:0.97260273972602739634,0.252558445361:0.97267759562841529962,0.252012031542:0.97282608695652173820,0.244908481567:0.97297297297297297204,0.24388261117:0.97311827956989247219,0.241461198642:0.97050938337801608486,0.239101185062:0.97058823529411764613,0.237450843178:0.97066666666666666574,0.233705205486:0.96808510638297872248,0.232954036377:0.96825396825396825303,0.227937513315:0.96833773087071240011,0.227623770425:0.96850393700787401480,0.227382285857:0.96858638743455497287,0.222243703126:0.96866840731070495988,0.218280576251:0.96874999999999999904,0.217066362231:0.96883116883116883021,0.215119852489:0.96891191709844559489,0.211618432813:0.96899224806201550291,0.211364929681:0.96915167095115681137,0.21119382891:0.96923076923076922980,0.209563099339:0.96675191815856777396,0.207917315837:0.96428571428571428474,0.206092816024:0.96437659033078880309,0.205895649556:0.96192893401015228328,0.204625748831:0.95949367088607594838,0.200319945556:0.95959595959595959497,0.197614423202:0.95969773299748110732,0.197605380287:0.95979899497487437086,0.194570297711:0.95989974937343358296,0.192758539644:0.95999999999999999900,0.191659826422:0.95760598503740648279,0.191424196018:0.95771144278606965074,0.188052544025:0.95781637717121587989,0.187030386334:0.95792079207920791979,0.186273264091:0.95802469135802469035,0.184513923045:0.95812807881773398914,0.184411113843:0.95823095823095822995,0.179195412597:0.95843520782396087918,0.179162072767:0.95853658536585365752,0.174520405255:0.95863746958637469484,0.172747325632:0.95873786407766990189,0.171015619482:0.95641646489104116120,0.170861130034:0.95652173913043478158,0.169618345359:0.95662650602409638451,0.165022129475:0.95432692307692307589,0.164969366929:0.95443645083932853613,0.164614724979:0.95454545454545454441,0.163684719383:0.95465393794749403237,0.161275871338:0.95486935866983372817,0.160506616062:0.95497630331753554398,0.157489047502:0.95508274231678486893,0.15744499441:0.95518867924528301782,0.157065087593:0.95294117647058823424,0.153605504166:0.95070422535211267500,0.153139356815:0.95081967213114753992,0.152207001522:0.95104895104895104788,0.150990048196:0.95116279069767441753,0.147501817568:0.95127610208816705229,0.144433020878:0.95138888888888888781,0.142740353207:0.95150115473441108437,0.142611231266:0.95161290322580645053,0.141430394826:0.95172413793103448167,0.14140231451:0.95183486238532109983,0.141254673868:0.95194508009153317969,0.140440192228:0.94977168949771689389,0.139803819351:0.94988610478359908775,0.136662520187:0.94999999999999999891,0.135295112464:0.95022624434389140162,0.134396559448:0.95045045045045044935,0.134364738251:0.95056179775280898766,0.133996937213:0.95067264573991031279,0.133169432493:0.95078299776286353356,0.133093550146:0.95089285714285714174,0.132156086917:0.94877505567928730400,0.128461057449:0.94888888888888888776,0.125305747328:0.94900221729490022060,0.12516820387:0.94690265486725663604,0.122940742562:0.94701986754966887304,0.122183184736:0.94713656387665198124,0.116353202905:0.94725274725274725161,0.116302034188:0.94517543859649122693,0.115588079559:0.94529540481400437522,0.113994692035:0.94323144104803493335,0.113811885213:0.94347826086956521624,0.113200083894:0.94360086767895878410,0.112550532892:0.94372294372294372179,0.112533497761:0.94384449244060475046,0.110710944337:0.94396551724137930918,0.110646668306:0.94420600858369098596,0.109927278877:0.94444444444444444328,0.109564320701:0.94468085106382978607,0.109062429227:0.94267515923566878864,0.108012754736:0.94279661016949152425,0.107517247558:0.94303797468354430262,0.10643917416:0.94105263157894736724,0.106187516435:0.94117647058823529293,0.105639274406:0.93920335429769391915,0.104320615163:0.93933054393305439212,0.104137608618:0.93945720250521920549,0.10311936066:0.93970893970893970774,0.0993195132902:0.93775933609958506104,0.097214294303:0.93581780538302277312,0.0951468560134:0.93595041322314049466,0.09477840824:0.93402061855670102972,0.0934820821945:0.93209876543209876422,0.091400083091:0.93223819301848049160,0.0889020595644:0.93237704918032786764,0.0885984138904:0.93047034764826175748,0.0861408882083:0.93061224489795918246,0.0851961603567:0.92871690427698574216,0.0851858308692:0.92886178861788617764,0.08455944529:0.92914979757085020120,0.083401250631:0.92929292929292929170,0.0830909846282:0.92943548387096774070,0.0814935546007:0.92957746478873239313,0.0813002105381:0.92771084337349397466,0.0792326897476:0.92785571142284569014,0.0778553636808:0.92799999999999999875,0.0774946687682:0.92614770459081836202,0.077339520495:0.92673267326732673141,0.0768285187462:0.92687747035573122403,0.0765696784074:0.92702169625246548197,0.076006723533:0.92716535433070866015,0.0756295522159:0.92730844793713162938,0.0731794838168:0.92745098039215686147,0.0731647833509:0.92773437499999999872,0.0727926513406:0.92787524366471734765,0.0717066174964:0.92801556420233462907,0.0713791208252:0.92621359223300970746,0.0711277714942:0.92635658914728682043,0.0683024632779:0.92649903288201160414,0.067836452244:0.92664092664092663965,0.0677416334216:0.92678227360308285036,0.0660808768053:0.92499999999999999872,0.0659337033602:0.92322456813819577607,0.0648093941506:0.92337164750957854278,0.062254458731:0.92351816443594646143,0.061926900939:0.92366412213740457887,0.061470371281:0.92380952380952380824,0.0607943775984:0.92395437262357414320,0.0592680397096:0.92409867172675521693,0.059191611703:0.92438563327032135977,0.0581636892397:0.92452830188679245154,0.0557800156958:0.92278719397363465031,0.0556465347507:0.92293233082706766788,0.055489973729:0.92307692307692307563,0.0553238223847:0.92322097378277153428,0.0547313438974:0.92149532710280373701,0.0546440850796:0.92164179104477611809,0.0541682221158:0.92178770949720670260,0.0537622610871:0.92007434944237918084,0.05155968033:0.92037037037037036904,0.05083901208:0.91866913123844731845,0.050735667174:0.91896869244935543145,0.0504839684807:0.91911764705882352808,0.0502324811353:0.91926605504587155830,0.0497446244101:0.91758241758241758108,0.0489178220662:0.91773308957952467873,0.048776522234:0.91803278688524590029,0.0476925526187:0.91818181818181818047,0.0472405466548:0.91833030852994555219,0.0469982556694:0.91847826086956521604,0.0468011555101:0.91681735985533453752,0.0467420432255:0.91696750902527075676,0.0467410410971:0.91531531531531531395,0.0467012671603:0.91546762589928057417,0.0464819819187:0.91382405745062836488,0.0460971112477:0.91397849462365591261,0.0457795581724:0.91413237924865831705,0.0457750686231:0.91428571428571428434,0.0456960837849:0.91443850267379679007,0.0451910271774:0.91459074733096085272,0.0444510297822:0.91474245115452930591,0.0443169301408:0.91489361702127659437,0.0436264335415:0.91327433628318583933,0.0435926871823:0.91342756183745582901,0.0434284572342:0.91358024691358024553,0.0423573009293:0.91197183098591549157,0.042279722645:0.91258741258741258602,0.0422094404156:0.91273996509598603700,0.0421107435992:0.91289198606271776864,0.0415454923141:0.91304347826086956382,0.0413565995694:0.91319444444444444304,0.0413501303162:0.91334488734835355145,0.040975209998:0.91349480968858131347,0.0407425543624:0.91364421416234887596,0.0406907295205:0.91379310344827586065,0.038866464456:0.91394148020654044608,0.0384122691452:0.91237113402061855527,0.038321913025:0.91252144082332761435,0.0382848392037:0.91267123287671232733,0.037145711528:0.91111111111111110967,0.0368822227686:0.91126279863481228525,0.0361963313757:0.91141396933560476858,0.0355744928876:0.91156462585034013461,0.0349081920607:0.91171477079796264711,0.0345433149398:0.91186440677966101550,0.034454244763:0.91201353637901861107,0.033823778116:0.91231028667790893615,0.033823545642:0.91077441077441077295,0.0329156700533:0.90924369747899159518,0.0325911087563:0.90771812080536912606,0.0324146320949:0.90787269681742043405,0.0320907384052:0.90802675585284280790,0.0311362508444:0.90651085141903171807,0.0308113398885:0.90499999999999999853,0.0293046103943:0.90349417637271214495,0.0287136294028:0.90365448504983388557,0.0269847507318:0.90215588723051409471,0.0269386932725:0.90231788079470198528,0.0268793118896:0.90264026402640263878,0.0266517848544:0.90115321252059307924,0.0264931432779:0.89967105263157894588,0.0263325360427:0.89819376026272577848,0.0261684297612:0.89836065573770491654,0.0259032425544:0.89852700490998363189,0.0250653690893:0.89705882352941176321,0.0247067697204:0.89722675367047308170,0.0237474681085:0.89739413680781758808,0.0226725325518:0.89593495934959349444,0.0225612573528:0.89448051948051947902,0.02163157641:0.89465153970826580077,0.0212294353829:0.89320388349514562957,0.0208795524756:0.89176090468497576587,0.0208773664913:0.89193548387096774044,0.0207697176753:0.89210950080515297757,0.0205222937406:0.89228295819935691168,0.0204519294386:0.89085072231139646719,0.0197196255347:0.88942307692307692156,0.0194268947401:0.88799999999999999848,0.0193348801237:0.88835725677830940837,0.0192137569868:0.88853503184713375644,0.0186522130302:0.88712241653418123854,0.0179195412597:0.88748019017432646440,0.0176073923009:0.88765822784810126429,0.0174931410171:0.88625592417061611221,0.0169519587931:0.88485804416403785335,0.0169327077569:0.88503937007874015594,0.0166305992851:0.88364779874213836324,0.0159092405258:0.88226059654631083048,0.015684532189:0.88244514106583071946,0.0155803470324:0.87831513260530421062,0.0153606460249:0.87694704049844236605,0.0148170099274:0.87713841368584758787,0.0140051544948:0.87577639751552794875,0.0137121271162:0.87441860465116278913,0.0134948085391:0.87461300309597523063,0.0131662680213:0.87326120556414219317,0.0131383418985:0.87345679012345678855,0.0124105665676:0.87211093990755007547,0.0119043813205:0.87076923076923076766,0.0114755925791:0.86943164362519201072,0.0111946350455:0.86809815950920245242,0.0109825674526:0.86830015313935681313,0.0109808178373:0.86697247706422018191,0.0106126748115:0.86564885496183205949,0.0101530608969:0.86432926829268292525,0.00986062081503:0.86301369863013698472,0.0098357777439:0.86170212765957446650,0.00927192703504:0.86039453717754172831,0.00905479494906:0.85909090909090908932,0.00874699140912:0.85779122541603630703,0.00860833824457:0.85649546827794561774,0.0074085049637:0.85671191553544494561,0.00668205179266:0.85542168674698795020,0.00634566306059:0.85413533834586466004,0.00603453950978:0.85285285285285285124,0.00598600473092:0.85157421289355322177,0.00588129182616:0.85029940119760478880,0.00560206179789:0.84902840059790732274,0.0053938136015:0.84776119402985074464,0.00525968598503:0.84649776453055141417,0.00491701439464:0.84523809523809523647,0.00452739747454:0.84398216939078751695,0.00446849465748:0.84272997032640949392,0.00434595461537:0.84148148148148147985,0.00385717010384:0.84023668639053254274,0.00382484025223:0.83899556868537666010,0.00380554176986:0.83775811209439527859,0.00370597729211:0.83652430044182621337,0.00326656719455:0.83529411764705882187,0.00322930521503:0.83406754772393538747,0.00309064234501:0.83284457478005864936,0.00308109221434:0.83162518301610541561,0.00301826498303:0.82798833819241982340,0.00300721749934:0.82678311499272197795,0.00266935258888:0.82558139534883720763,0.00253869383304:0.82438316400580551356,0.00248126429236:0.82318840579710144759,0.002421708399:0.82199710564399420960,0.00237962364772:0.82080924855491329311,0.00237948805318:0.81962481962481962313,0.0023708915437:0.81844380403458213087,0.00235477512001:0.81726618705035971053,0.00224255087698:0.81609195402298850404,0.00217077439326:0.81492109038737446027,0.00214327580129:0.81375358166189111577,0.00210077317421:0.81142857142857142685,0.00209645410639:0.80911680911680911508,0.00208082348296:0.80796586059743954308,0.0020757500563:0.80681818181818181645,0.00201662768577:0.80567375886524822522,0.00198406774408:0.80453257790368271781,0.00188910535832:0.80339462517680339289,0.00186369523395:0.80225988700564971578,0.00185612549796:0.80112834978843441293,0.00185340971589:0.79999999999999999826,0.00173572654673:0.79887482419127988574,0.00172979171358:0.79775280898876404320,0.00157234057979:0.79663394109396914271,0.0015534915044:0.79551820728291316351,0.00155307936162:0.79440559440559440384,0.00150810196709:0.79329608938547485858,0.00142522156367:0.79218967921896792014,0.00142151234345:0.79108635097493036036,0.00142024660633:0.78998609179415855179,0.00140051544948:0.78670360110803323923,0.00132456100501:0.78561549100968187928,0.00131335379559:0.78453038674033148994,0.00129559697356:0.78236914600550964009,0.00125108584047:0.78129298486932599546,0.00124286592235:0.78021978021978021799,0.0012424634893:0.77914951989026062921,0.001155819485:0.77808219178082191601,0.0011104910356:0.77701778385772913637,0.0010581694635:0.77595628415300546268,0.00104020968157:0.77489768076398362712,0.00103787502815:0.77173913043478260689,0.00103030598627:0.77069199457259158571,0.000933106314681:0.76860622462787550563,0.000898024913522:0.76653171390013495095,0.000793207882573:0.76549865229110511947,0.000788934962449:0.76446837146702557018,0.000787064399898:0.76344086021505376161,0.000786170289898:0.76139410187667560138,0.000772729489704:0.76037483266398928866,0.000771562122507:0.75935828877005347410,0.000764759774553:0.75834445927903871645,0.000761790115115:0.75733333333333333149,0.000759888693187:0.75632490013315579043,0.000758743960784:0.75531914893617021092,0.000743454366822:0.75431606905710491183,0.000735867225003:0.75231788079470198490,0.000702155857004:0.75132275132275132089,0.000696047061735:0.75033025099075297040,0.000691916685431:0.74736842105263157708,0.000684687158743:0.74638633377135348039,0.000650452800806:0.74540682414698162542,0.000634566306059:0.74442988204456094176,0.000621231744651:0.74345549738219895099,0.000609388825264:0.74248366013071895236,0.000596503574657:0.74151436031331592500,0.000524113526598:0.73958333333333333143,0.000507783483804:0.73862158647594278093,0.000502523309424:0.73766233766233766043,0.000482237055292:0.73670557717250324063,0.00047928101112:0.73575129533678756285,0.000475924729543:0.73385012919896640634,0.000454336142767:0.73290322580645161097,0.000441520335003:0.72913992297817714825,0.000438397322993:0.72820512820512820318,0.000431865657854:0.72634271099744245329,0.000428160487536:0.72541507024265644760,0.000410812295247:0.72448979591836734498,0.000397669049773:0.72356687898089171778,0.000382149817529:0.72264631043256997259,0.000380587100032:0.72172808132147394975,0.000375691856073:0.72081218274111674930,0.000369264117646:0.71989860583016476355,0.000345958342716:0.71626733921815888831,0.000345846777027:0.71536523929471032547,0.00034060450473:0.71446540880503144455,0.000338515218983:0.71356783919597989750,0.000338452342432:0.71267252195734002309,0.000324821962143:0.71177944862155388271,0.000321430841987:0.70999999999999999799,0.000315223495909:0.70911360799001248238,0.000313548744007:0.70822942643391520995,0.000310615872324:0.70734744707347446871,0.000309227018776:0.70646766169154228653,0.000308109221434:0.70559006211180124021,0.000304670090282:0.70471464019851116422,0.00029434689:0.70384138785625774270,0.000290736624126:0.70210135970333745161,0.000290430765922:0.70036991368680640979,0.00028933579594:0.69950738916256157430,0.000287198969719:0.69864698646986469659,0.00028501249889:0.69778869778869778664,0.000284528985295:0.69693251533742331082,0.000282239118991:0.69607843137254901754,0.000280260201503:0.69522643818849448997,0.000277389248417:0.69437652811735941113,0.00027696699735:0.69352869352869352662,0.00026847135709:0.69268292682926829061,0.000264542365876:0.68765133171912832721,0.000262686246592:0.68681983071342200516,0.0002620567633:0.68351383874849578610,0.000261653631272:0.68269230769230769020,0.000261208991465:0.68187274909963985383,0.000260502039835:0.68105515587529975808,0.000258292577119:0.68023952095808383022,0.000258167312429:0.67861409796893667649,0.00025653988146:0.67780429594272076160,0.00025521725597:0.67619047619047618835,0.000247189214463:0.67538644470868014056,0.000237107487745:0.67378410438908659336,0.000233811905596:0.67298578199052132488,0.000232344612737:0.67218934911242603337,0.000232250308568:0.67139479905437352032,0.000231768316868:0.67060212514757969089,0.000227239457013:0.66981132075471697899,0.000223584696728:0.66902237926972909091,0.0002207798542:0.66823529411764705668,0.000216317095743:0.66745005875440657835,0.000214080243768:0.66666666666666666452,0.000213779655759:0.66510538641686182455,0.000211977158887:0.66432748538011695691,0.000208964741512:0.66355140186915887635,0.00020719220059:0.66277712952158692900,0.000203113393521:0.66123399301513387444,0.000200185858216:0.66046511627906976528,0.000199632547579:0.65969802555168408611,0.000198834524886:0.65893271461716937139,0.000195004424085:0.65816917728852838718,0.000194843254663:0.65740740740740740525,0.000193152310184:0.65664739884393063368,0.000191465979813:0.65588914549653579461,0.000187039452396:0.65513264129181083982,0.000185278803277:0.65437788018433179507,0.000184926165612:0.65362485615650172395,0.000182970923163:0.65287356321839080242,0.00018281664758:0.65212399540757749495,0.000176449518076:0.65137614678899082351,0.000175964176881:0.65063001145475372061,0.000172097023775:0.64914285714285714067,0.00016996343237:0.64840182648401826265,0.000165975241422:0.64766248574686430796,0.00016183281281:0.64618885096700796140,0.000159554983178:0.64472190692395005456,0.000158641576514:0.63892013498312710689,0.000156832219853:0.63820224719101123373,0.000155544743907:0.63748597081930415041,0.00015494635872:0.63677130044843049104,0.000153870554083:0.63534675615212527740,0.000147201892164:0.63463687150837988602,0.000147173445001:0.63322185061315495873,0.000142720162512:0.63251670378619153449,0.000142519770506:0.63181312569521690541,0.000141318105925:0.63111111111111110884,0.000139350185141:0.63041065482796892114,0.00013896357001:0.62901439645625691909,0.000136937431749:0.62762430939226519108,0.000136390278264:0.62693156732891832000,0.000133576216075:0.62417582417582417352,0.000132271182938:0.61873638344226579289,0.000130604495732:0.61806311207834602597,0.000128593687085:0.61739130434782608463,0.000128572336795:0.61672095548317046455,0.000126945870951:0.61605206073752711263,0.000126599135892:0.61538461538461538228,0.000126035370054:0.61471861471861471628,0.000123909857118:0.61405405405405405172,0.000121777034165:0.61339092872570194151,0.000119383431416:0.61272923408845738709,0.000118673083049:0.61206896551724137697,0.000117025976167:0.61141011840688912575,0.000116773656917:0.61075268817204300841,0.000116172306369:0.61009667024704618455,0.000116125154285:0.60944206008583690752,0.000114087329752:0.60878885316184351319,0.000114017725094:0.60813704496788008330,0.00011353483491:0.60748663101604277839,0.000112751018559:0.60683760683760683525,0.000111243718185:0.60554371002132195925,0.000111132375565:0.60425531914893616784,0.000107559317283:0.60361317747077576808,0.00010688982788:0.60297239915074309741,0.000105074498637:0.60105820105820105581,0.000104554813236:0.60042283298097251346,0.000102703073812:0.59978880675818373572,0.000101583799656:0.59915611814345991321}	
	if raw > min(x.keys()):
		return(x[max([y for y in x.keys() if y < raw])])
	return(0)


if __name__=="__main__":
	parser = argparse.ArgumentParser(description="usage: %prog [options] input output", epilog="This program is the property of Signature Science, LLC, and cannot be used without their permission. Please contact git@signaturescience.com for more details (C) 2020, Signature Science, LLC")
	parser.add_argument("-d", "--db", default="database", help="database of reference genomes to use")
	parser.add_argument("-t", "--threads", default=0, help="number of threads to use for alignment (all by default)")
	parser.add_argument("-p","--paired", default="none", help="second set of reads in pair (if any)")
	parser.add_argument("--report", action='store_false', help="turn off the generation of a report")
	parser.add_argument("--reads_out", action='store_true', help="turn on the output of species- and strain-specific reads")
	parser.add_argument("--keep_sam", action='store_true', help="retain the aligned reads in SAM format")
	parser.add_argument("-r", "--reads", help="Set of reads (FASTQ/FASTA) to be processed", required=True)
	parser.add_argument("--out", help="Prefix for output files", required=True)
	parser.add_argument("-v","--version", help="print version", action='version', version="siann.py version="+str(VERSION))
	#parser.add_argument("--help", help="print this helpful message", action='store_true')

	args = vars(parser.parse_args())
	#Run without GUI
	if args['paired'] != 'none':
		if os.path.exists(args['reads']) and os.path.exists(args['paired']):
			reads=[args['reads'], args['paired']]
		else:
			print("could not find one of {R1} or {R2}, please check your inputs".format(R1=args['reads'], R2=args['paired']) )
			parser.print_usage()
			exit(1)
	elif os.path.exists(args['reads']):
		reads=[args['reads']]
	else:
		print("could not find {R1}, please check your inputs".format(R1=args['reads']))
		parser.print_usage()
		exit(1)
	run_siann(reads, args['out'], args['db'], args['threads'], args['report'], args['reads_out'], args['keep_sam'])

